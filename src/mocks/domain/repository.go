// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -package=mock_domain -destination=../mocks/domain/repository.go
//
// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	domain "github.com/ryunosuke121/muscle-SNS/src/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// ChangeUserGroup mocks base method.
func (m *MockIUserRepository) ChangeUserGroup(ctx context.Context, userId domain.UserID, groupId domain.UserGroupID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserGroup", ctx, userId, groupId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserGroup indicates an expected call of ChangeUserGroup.
func (mr *MockIUserRepositoryMockRecorder) ChangeUserGroup(ctx, userId, groupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserGroup", reflect.TypeOf((*MockIUserRepository)(nil).ChangeUserGroup), ctx, userId, groupId)
}

// ChangeUserImage mocks base method.
func (m *MockIUserRepository) ChangeUserImage(ctx context.Context, userId domain.UserID, file *multipart.FileHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserImage", ctx, userId, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserImage indicates an expected call of ChangeUserImage.
func (mr *MockIUserRepositoryMockRecorder) ChangeUserImage(ctx, userId, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserImage", reflect.TypeOf((*MockIUserRepository)(nil).ChangeUserImage), ctx, userId, file)
}

// ChangeUserName mocks base method.
func (m *MockIUserRepository) ChangeUserName(ctx context.Context, userId domain.UserID, userName domain.UserName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserName", ctx, userId, userName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserName indicates an expected call of ChangeUserName.
func (mr *MockIUserRepositoryMockRecorder) ChangeUserName(ctx, userId, userName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserName", reflect.TypeOf((*MockIUserRepository)(nil).ChangeUserName), ctx, userId, userName)
}

// CreateUser mocks base method.
func (m *MockIUserRepository) CreateUser(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserRepositoryMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserRepository)(nil).CreateUser), ctx, user)
}

// GetUserByEmail mocks base method.
func (m *MockIUserRepository) GetUserByEmail(ctx context.Context, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockIUserRepositoryMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockIUserRepository)(nil).GetUserByEmail), ctx, email)
}

// GetUsersByIds mocks base method.
func (m *MockIUserRepository) GetUsersByIds(ctx context.Context, userIds []domain.UserID) ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByIds", ctx, userIds)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByIds indicates an expected call of GetUsersByIds.
func (mr *MockIUserRepositoryMockRecorder) GetUsersByIds(ctx, userIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByIds", reflect.TypeOf((*MockIUserRepository)(nil).GetUsersByIds), ctx, userIds)
}

// GetUsersInGroup mocks base method.
func (m *MockIUserRepository) GetUsersInGroup(ctx context.Context, groupId domain.UserGroupID) ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersInGroup", ctx, groupId)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersInGroup indicates an expected call of GetUsersInGroup.
func (mr *MockIUserRepositoryMockRecorder) GetUsersInGroup(ctx, groupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersInGroup", reflect.TypeOf((*MockIUserRepository)(nil).GetUsersInGroup), ctx, groupId)
}

// MockIPostRepository is a mock of IPostRepository interface.
type MockIPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPostRepositoryMockRecorder
}

// MockIPostRepositoryMockRecorder is the mock recorder for MockIPostRepository.
type MockIPostRepositoryMockRecorder struct {
	mock *MockIPostRepository
}

// NewMockIPostRepository creates a new mock instance.
func NewMockIPostRepository(ctrl *gomock.Controller) *MockIPostRepository {
	mock := &MockIPostRepository{ctrl: ctrl}
	mock.recorder = &MockIPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPostRepository) EXPECT() *MockIPostRepositoryMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockIPostRepository) CreatePost(ctx context.Context, post *domain.Post) (*domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, post)
	ret0, _ := ret[0].(*domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockIPostRepositoryMockRecorder) CreatePost(ctx, post any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockIPostRepository)(nil).CreatePost), ctx, post)
}

// DeletePost mocks base method.
func (m *MockIPostRepository) DeletePost(ctx context.Context, postId domain.PostID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, postId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockIPostRepositoryMockRecorder) DeletePost(ctx, postId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockIPostRepository)(nil).DeletePost), ctx, postId)
}

// GetPostsByIds mocks base method.
func (m *MockIPostRepository) GetPostsByIds(ctx context.Context, ids []domain.PostID) ([]*domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByIds", ctx, ids)
	ret0, _ := ret[0].([]*domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByIds indicates an expected call of GetPostsByIds.
func (mr *MockIPostRepositoryMockRecorder) GetPostsByIds(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByIds", reflect.TypeOf((*MockIPostRepository)(nil).GetPostsByIds), ctx, ids)
}

// GetPostsByOptions mocks base method.
func (m *MockIPostRepository) GetPostsByOptions(ctx context.Context, options *domain.GetPostsOptions) ([]*domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByOptions", ctx, options)
	ret0, _ := ret[0].([]*domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByOptions indicates an expected call of GetPostsByOptions.
func (mr *MockIPostRepositoryMockRecorder) GetPostsByOptions(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByOptions", reflect.TypeOf((*MockIPostRepository)(nil).GetPostsByOptions), ctx, options)
}

// GetTrainingsByIds mocks base method.
func (m *MockIPostRepository) GetTrainingsByIds(ctx context.Context, ids []domain.TrainingID) ([]*domain.Training, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrainingsByIds", ctx, ids)
	ret0, _ := ret[0].([]*domain.Training)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrainingsByIds indicates an expected call of GetTrainingsByIds.
func (mr *MockIPostRepositoryMockRecorder) GetTrainingsByIds(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrainingsByIds", reflect.TypeOf((*MockIPostRepository)(nil).GetTrainingsByIds), ctx, ids)
}

// GetUserTrainings mocks base method.
func (m *MockIPostRepository) GetUserTrainings(ctx context.Context, userId domain.UserID) ([]*domain.Training, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTrainings", ctx, userId)
	ret0, _ := ret[0].([]*domain.Training)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTrainings indicates an expected call of GetUserTrainings.
func (mr *MockIPostRepositoryMockRecorder) GetUserTrainings(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTrainings", reflect.TypeOf((*MockIPostRepository)(nil).GetUserTrainings), ctx, userId)
}

// GetUsersTotalWeightByMenuInMonth mocks base method.
func (m *MockIPostRepository) GetUsersTotalWeightByMenuInMonth(ctx context.Context, userIds []domain.UserID, menuId domain.MenuID, year, month int) (map[domain.UserID]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersTotalWeightByMenuInMonth", ctx, userIds, menuId, year, month)
	ret0, _ := ret[0].(map[domain.UserID]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersTotalWeightByMenuInMonth indicates an expected call of GetUsersTotalWeightByMenuInMonth.
func (mr *MockIPostRepositoryMockRecorder) GetUsersTotalWeightByMenuInMonth(ctx, userIds, menuId, year, month any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersTotalWeightByMenuInMonth", reflect.TypeOf((*MockIPostRepository)(nil).GetUsersTotalWeightByMenuInMonth), ctx, userIds, menuId, year, month)
}

// GetUsersTotalWeightInMonth mocks base method.
func (m *MockIPostRepository) GetUsersTotalWeightInMonth(ctx context.Context, userIds []domain.UserID, year, month int) (map[domain.UserID]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersTotalWeightInMonth", ctx, userIds, year, month)
	ret0, _ := ret[0].(map[domain.UserID]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersTotalWeightInMonth indicates an expected call of GetUsersTotalWeightInMonth.
func (mr *MockIPostRepositoryMockRecorder) GetUsersTotalWeightInMonth(ctx, userIds, year, month any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersTotalWeightInMonth", reflect.TypeOf((*MockIPostRepository)(nil).GetUsersTotalWeightInMonth), ctx, userIds, year, month)
}

// SavePostImage mocks base method.
func (m *MockIPostRepository) SavePostImage(ctx context.Context, file *multipart.FileHeader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePostImage", ctx, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePostImage indicates an expected call of SavePostImage.
func (mr *MockIPostRepositoryMockRecorder) SavePostImage(ctx, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePostImage", reflect.TypeOf((*MockIPostRepository)(nil).SavePostImage), ctx, file)
}

// MockIMenuRepository is a mock of IMenuRepository interface.
type MockIMenuRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIMenuRepositoryMockRecorder
}

// MockIMenuRepositoryMockRecorder is the mock recorder for MockIMenuRepository.
type MockIMenuRepositoryMockRecorder struct {
	mock *MockIMenuRepository
}

// NewMockIMenuRepository creates a new mock instance.
func NewMockIMenuRepository(ctrl *gomock.Controller) *MockIMenuRepository {
	mock := &MockIMenuRepository{ctrl: ctrl}
	mock.recorder = &MockIMenuRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMenuRepository) EXPECT() *MockIMenuRepositoryMockRecorder {
	return m.recorder
}

// GetMenuById mocks base method.
func (m *MockIMenuRepository) GetMenuById(ctx context.Context, id domain.MenuID) (domain.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuById", ctx, id)
	ret0, _ := ret[0].(domain.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuById indicates an expected call of GetMenuById.
func (mr *MockIMenuRepositoryMockRecorder) GetMenuById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuById", reflect.TypeOf((*MockIMenuRepository)(nil).GetMenuById), ctx, id)
}
